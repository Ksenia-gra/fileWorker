Использовала реляционную СУБД MySQL

/*
Подготовьте DDL-скрипты создания объектов для приведённой модели: 
создание таблиц,первичных, уникальных, внешних ключей и т.д.
*/
USE BankOperations;
CREATE TABLE IF NOT EXISTS clients
( 
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
    name VARCHAR(1000),
    place_of_birth VARCHAR(1000),
    date_of_birth DATE,
    address VARCHAR(1000),
    passport VARCHAR(100)
);
CREATE TABLE IF NOT EXISTS tarifs
(
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
    name VARCHAR(100),
    cost FLOAT(10,2)
);
CREATE TABLE IF NOT EXISTS product_type
(
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
    name VARCHAR(100),
    begin_date DATE,
    end_date DATE,
    tarif_ref INT(10) UNSIGNED NOT NULL,
    FOREIGN KEY(tarif_ref)
    REFERENCES tarifs(id)
);
CREATE TABLE IF NOT EXISTS products
(
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
    product_type_id INT(10) UNSIGNED NOT NULL,
    name VARCHAR(100),
    client_ref INT(10) UNSIGNED NOT NULL,
    open_date DATE,
    close_date DATE,
    FOREIGN KEY(product_type_id)
    REFERENCES product_type(id),
    FOREIGN KEY(client_ref)
    REFERENCES clients(id)
);
CREATE TABLE IF NOT EXISTS accounts
(
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
	name VARCHAR(100),
	saldo FLOAT(10,2),
    client_ref INT(10) UNSIGNED NOT NULL,
    open_date DATE,
    close_date DATE,
    product_ref INT(10) UNSIGNED NOT NULL,
    acc_num VARCHAR(25),
    FOREIGN KEY(client_ref)
    REFERENCES clients(id),
    FOREIGN KEY(product_ref)
    REFERENCES products(id)
);
CREATE TABLE IF NOT EXISTS records
(
	id INT(10) UNSIGNED NOT NULL PRIMARY KEY,
    dt TINYINT(1),
    sum FLOAT(10,2),
    acc_ref INT(10) UNSIGNED NOT NULL,
    oper_date DATE,
    FOREIGN KEY(acc_ref)
    REFERENCES accounts(id)
);

/*Заполните таблицы примерами из приложенного скрипта.*/
USE BankOperations;
insert into tarifs values (1,'Тариф за выдачу кредита', 10);
insert into tarifs values (2,'Тариф за открытие счета', 10);
insert into tarifs values (3,'Тариф за обслуживание карты', 10);

insert into product_type values (1, 'КРЕДИТ', str_to_date('01.01.2018','%d.%m.%Y'), null, 1);
insert into product_type values (2, 'ДЕПОЗИТ', str_to_date('01.01.2018','%d.%m.%Y'), null, 2);
insert into product_type values (3, 'КАРТА', str_to_date('01.01.2018','%d.%m.%Y'), null, 3);

insert into clients values (1, 'Сидоров Иван Петрович', 'Россия, Московская облать, г. Пушкин', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Пушкин, ул. Грибоедова, д. 5', '2222 555555, выдан ОВД г. Пушкин, 10.01.2015');
insert into clients values (2, 'Иванов Петр Сидорович', 'Россия, Московская облать, г. Клин', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Клин, ул. Мясникова, д. 3', '4444 666666, выдан ОВД г. Клин, 10.01.2015');
insert into clients values (3, 'Петров Сиодр Иванович', 'Россия, Московская облать, г. Балашиха', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Балашиха, ул. Пушкина, д. 7', '4444 666666, выдан ОВД г. Клин, 10.01.2015');

insert into products values (1, 1, 'Кредитный договор с Сидоровым И.П.', 1, str_to_date('01.06.2015','%d.%m.%Y'), null);
insert into products values (2, 2, 'Депозитный договор с Ивановым П.С.', 2, str_to_date('01.08.2017','%d.%m.%Y'), null);
insert into products values (3, 3, 'Карточный договор с Петровым С.И.', 3, str_to_date('01.08.2017','%d.%m.%Y'), null);


insert into accounts values (1, 'Кредитный счет для Сидоровым И.П.', -2000, 1, str_to_date('01.06.2015','%d.%m.%Y'), null, 1, '45502810401020000022');
insert into accounts values (2, 'Депозитный счет для Ивановым П.С.', 6000, 2, str_to_date('01.08.2017','%d.%m.%Y'), null, 2, '42301810400000000001');
insert into accounts values (3, 'Карточный счет для Петровым С.И.', 8000, 3, str_to_date('01.08.2017','%d.%m.%Y'), null, 3, '40817810700000000001');

insert into records values (1, 1, 5000, 1, str_to_date('01.06.2015','%d.%m.%Y'));
insert into records values (2, 0, 1000, 1, str_to_date('01.07.2015','%d.%m.%Y'));
insert into records values (3, 0, 2000, 1, str_to_date('01.08.2015','%d.%m.%Y'));
insert into records values (4, 0, 3000, 1, str_to_date('01.09.2015','%d.%m.%Y'));
insert into records values (5, 1, 5000, 1, str_to_date('01.10.2015','%d.%m.%Y'));
insert into records values (6, 0, 3000, 1, str_to_date('01.10.2015','%d.%m.%Y'));

insert into records values (7, 0, 10000, 2, str_to_date('01.08.2017','%d.%m.%Y'));
insert into records values (8, 1, 1000, 2, str_to_date('05.08.2017','%d.%m.%Y'));
insert into records values (9, 1, 2000, 2, str_to_date('21.09.2017','%d.%m.%Y'));
insert into records values (10, 1, 5000, 2, str_to_date('24.10.2017','%d.%m.%Y'));
insert into records values (11, 0, 6000, 2, str_to_date('26.11.2017','%d.%m.%Y'));

insert into records values (12, 0, 120000, 3, str_to_date('08.09.2017','%d.%m.%Y'));
insert into records values (13, 1, 1000, 3, str_to_date('05.10.2017','%d.%m.%Y'));
insert into records values (14, 1, 2000, 3, str_to_date('21.10.2017','%d.%m.%Y'));
insert into records values (15, 1, 5000, 3, str_to_date('24.10.2017','%d.%m.%Yclients'));

commit;
/*Заполните таблицы примерами из приложенного скрипта.*/
USE BankOperations;
insert into tarifs values (1,'Тариф за выдачу кредита', 10);
insert into tarifs values (2,'Тариф за открытие счета', 10);
insert into tarifs values (3,'Тариф за обслуживание карты', 10);

insert into product_type values (1, 'КРЕДИТ', str_to_date('01.01.2018','%d.%m.%Y'), null, 1);
insert into product_type values (2, 'ДЕПОЗИТ', str_to_date('01.01.2018','%d.%m.%Y'), null, 2);
insert into product_type values (3, 'КАРТА', str_to_date('01.01.2018','%d.%m.%Y'), null, 3);

insert into clients values (1, 'Сидоров Иван Петрович', 'Россия, Московская облать, г. Пушкин', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Пушкин, ул. Грибоедова, д. 5', '2222 555555, выдан ОВД г. Пушкин, 10.01.2015');
insert into clients values (2, 'Иванов Петр Сидорович', 'Россия, Московская облать, г. Клин', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Клин, ул. Мясникова, д. 3', '4444 666666, выдан ОВД г. Клин, 10.01.2015');
insert into clients values (3, 'Петров Сиодр Иванович', 'Россия, Московская облать, г. Балашиха', str_to_date('01.01.2001','%d.%m.%Y'), 'Россия, Московская облать, г. Балашиха, ул. Пушкина, д. 7', '4444 666666, выдан ОВД г. Клин, 10.01.2015');

insert into products values (1, 1, 'Кредитный договор с Сидоровым И.П.', 1, str_to_date('01.06.2015','%d.%m.%Y'), null);
insert into products values (2, 2, 'Депозитный договор с Ивановым П.С.', 2, str_to_date('01.08.2017','%d.%m.%Y'), null);
insert into products values (3, 3, 'Карточный договор с Петровым С.И.', 3, str_to_date('01.08.2017','%d.%m.%Y'), null);


insert into accounts values (1, 'Кредитный счет для Сидоровым И.П.', -2000, 1, str_to_date('01.06.2015','%d.%m.%Y'), null, 1, '45502810401020000022');
insert into accounts values (2, 'Депозитный счет для Ивановым П.С.', 6000, 2, str_to_date('01.08.2017','%d.%m.%Y'), null, 2, '42301810400000000001');
insert into accounts values (3, 'Карточный счет для Петровым С.И.', 8000, 3, str_to_date('01.08.2017','%d.%m.%Y'), null, 3, '40817810700000000001');

insert into records values (1, 1, 5000, 1, str_to_date('01.06.2015','%d.%m.%Y'));
insert into records values (2, 0, 1000, 1, str_to_date('01.07.2015','%d.%m.%Y'));
insert into records values (3, 0, 2000, 1, str_to_date('01.08.2015','%d.%m.%Y'));
insert into records values (4, 0, 3000, 1, str_to_date('01.09.2015','%d.%m.%Y'));
insert into records values (5, 1, 5000, 1, str_to_date('01.10.2015','%d.%m.%Y'));
insert into records values (6, 0, 3000, 1, str_to_date('01.10.2015','%d.%m.%Y'));

insert into records values (7, 0, 10000, 2, str_to_date('01.08.2017','%d.%m.%Y'));
insert into records values (8, 1, 1000, 2, str_to_date('05.08.2017','%d.%m.%Y'));
insert into records values (9, 1, 2000, 2, str_to_date('21.09.2017','%d.%m.%Y'));
insert into records values (10, 1, 5000, 2, str_to_date('24.10.2017','%d.%m.%Y'));
insert into records values (11, 0, 6000, 2, str_to_date('26.11.2017','%d.%m.%Y'));

insert into records values (12, 0, 120000, 3, str_to_date('08.09.2017','%d.%m.%Y'));
insert into records values (13, 1, 1000, 3, str_to_date('05.10.2017','%d.%m.%Y'));
insert into records values (14, 1, 2000, 3, str_to_date('21.10.2017','%d.%m.%Y'));
insert into records values (15, 1, 5000, 3, str_to_date('24.10.2017','%d.%m.%Yclients'));

commit;
/*
Подготовьте скрипты заполнения таблиц тестовыми данными, 
достаточными для выполнения заданий ниже.
*/
USE BankOperations;
insert ignore into clients values (4, 'Решетников Андрей Андреевич', 'Россия, Ленинградская облать, г. Кировск', str_to_date('02.02.2002','%d.%m.%Y'), 'Россия, Ленинградская облать, г. Кировск, ул. Ленина, д. 5', '5555 777777, выдан ОВД г. Кировск, 11.02.2016');
insert ignore into clients values (5, 'Алентьев Вадим Вадимович', 'Россия, Московская облать, г. Балашиха', str_to_date('03.04.2003','%d.%m.%Y'), 'Россия, Московская облать, г. Балашиха, ул. Пушкина, д. 7', '4444 666666, выдан ОВД г. Балашиха, 12.03.2017');

insert ignore into products values (4, 1, 'Кредитный договор с Решетниковым А.А.', 4, str_to_date('01.06.2016','%d.%m.%Y'), null);
insert ignore into products values (5, 2, 'Депозитный договор с Решетниковым А.А.', 4, str_to_date('01.08.2018','%d.%m.%Y'), null);
insert ignore into products values (6, 2, 'Депозитный договор с Алентьевым В.В.', 5, str_to_date('01.08.2018','%d.%m.%Y'), null);
insert ignore into products values (7, 3, 'Карточный договор с Алентьевым В.В.', 5, str_to_date('01.08.2017','%d.%m.%Y'), null);

insert ignore into accounts values (4, 'Кредитный договор с Решетниковым А.А.', -2000, 4, str_to_date('01.06.2016','%d.%m.%Y'), null, 4, '45502810401020000044');
insert ignore into accounts values (5, 'Депозитный счет для Решетникова А.А.', 6000, 4, str_to_date('01.08.2018','%d.%m.%Y'), null, 5, '42301810400000000004');
insert ignore into accounts values (6, 'Депозитный счет для Алентьева В.В.', 8000, 5, str_to_date('01.08.2018','%d.%m.%Y'), null, 6, '40817810700000000005');
insert ignore into accounts values (7, 'Карточный счет для Алентьева В.В.', 8000, 5, str_to_date('01.08.2017','%d.%m.%Y'), null, 7, '40817810700000000005');

insert ignore into records values (16, 1, 7000, 4, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (17, 1, 9000, 4, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (18, 1, 4000, 6, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (19, 1, 2000, 6, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (20, 0, 1000, 5, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (21, 1, 3000, 5, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (22, 1, 3000, 4, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (23, 1, 3000, 5, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (24, 0, 4000, 4, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (25, 0, 9000, 7, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (26, 0, 5000, 5, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (27, 0, 1000, 6, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (28, 1, 1000, 4, str_to_date('01.10.2019','%d.%m.%Y'));

insert ignore into records values (29, 1, 5000, 7, str_to_date('01.10.2019','%d.%m.%Y'));
insert ignore into records values (30, 1, 2000, 7, str_to_date('01.10.2019','%d.%m.%Y'));


insert ignore into records values (31, 0, 14000, 4, str_to_date('13.10.2020','%d.%m.%Y'));
insert ignore into records values (32, 0, 5000, 6, str_to_date('26.10.2020','%d.%m.%Y'));
insert ignore into records values (33, 0, 5000, 5, str_to_date('14.11.2020','%d.%m.%Y'));
insert ignore into records values (34, 0, 13000, 6, str_to_date('01.11.2020','%d.%m.%Y'));
insert ignore into records values (35, 0, 6000, 7, str_to_date('04.12.2020','%d.%m.%Y'));

insert ignore into records values (36, 0, 2000, 6, str_to_date('01.08.2022','%d.%m.%Y'));
insert ignore into records values (37, 0, 5000, 6, str_to_date('01.08.2022','%d.%m.%Y'));
insert ignore into records values (38, 1, 10000, 4, str_to_date('01.08.2022','%d.%m.%Y'));
insert ignore into records values (39, 1, 5000, 7, str_to_date('14.08.2022','%d.%m.%Y'));
insert ignore into records values (40, 1, 7000, 4, str_to_date('29.08.2022','%d.%m.%Y'));
insert ignore into records values (41, 0, 1000, 4, str_to_date('29.08.2022','%d.%m.%Y'));
insert ignore into records values (42, 1, 9000, 7, str_to_date('29.08.2022','%d.%m.%Y'));

insert ignore into records values (43, 1, 2000, 6, str_to_date('01.09.2022','%d.%m.%Y'));
insert ignore into records values (44, 0, 5000, 7, str_to_date('03.09.2022','%d.%m.%Y'));
insert ignore into records values (45, 0, 7000, 4, str_to_date('11.09.2022','%d.%m.%Y'));
insert ignore into records values (46, 1, 5000, 6, str_to_date('12.09.2022','%d.%m.%Y'));
insert ignore into records values (47, 1, 1000, 4, str_to_date('12.09.2022','%d.%m.%Y'));
insert ignore into records values (48, 0, 9000, 7, str_to_date('12.09.2022','%d.%m.%Y'));
insert ignore into records values (49, 0, 10000, 4, str_to_date('12.09.2022','%d.%m.%Y'));
/*
Сформируйте отчет, который содержит все счета, 
относящиеся к продуктам типа ДЕПОЗИТ, принадлежащих клиентам, 
у которых нет открытых продуктов типа КРЕДИТ.
*/
USE BankOperations;
SELECT 'счет',NOW() as 'Время запроса',
accounts.*
FROM accounts,products
WHERE products.id=accounts.product_ref 
AND accounts.client_ref NOT IN (SELECT products.client_ref
FROM products,product_type
WHERE product_type.id=products.product_type_id 
AND product_type.name='КРЕДИТ' 
) 
AND accounts.product_ref IN (SELECT products.id
FROM products,product_type
WHERE product_type.id=products.product_type_id 
AND product_type.name='ДЕПОЗИТ' 
)

 /*Сформируйте выборку, которая содержит средние движения по 
счетам в рамках одного произвольного дня, в разрезе типа 
продукта.*/
SELECT oper_date as 'Выбранная дата',
product_type.name as 'Тип продукта',
AVG(records.sum) as 'Среднее движения по счетам'
FROM records INNER JOIN (accounts INNER JOIN 
(products INNER JOIN product_type 
ON products.product_type_id=product_type.id)
ON accounts.product_ref=products.id)
ON records.acc_ref=accounts.id
WHERE oper_date =str_to_date('01.10.2019','%d.%m.%Y')
GROUP BY product_type.name

/*
Сформируйте выборку, в который попадут клиенты, у 
которых были операции по счетам за прошедший месяц от 
текущей даты. Выведите клиента и 
сумму операций за день в разрезе даты.
*/
USE BankOperations;
SELECT clients.id,clients.name as 'Имя клиента',
oper_date as 'Дата операции',SUM(sum) as 'Сумма операций клиента'
FROM clients LEFT JOIN (accounts INNER JOIN records 
ON accounts.id=records.acc_ref) 
ON clients.id=accounts.client_ref 
WHERE records.id IN 
(SELECT records.id
FROM records
WHERE (oper_date>=CURRENT_DATE()-INTERVAL 1 MONTH) 
AND MONTH(oper_date)<>MONTH(CURRENT_DATE()) ) 
GROUP BY clients.id,records.oper_date
ORDER BY oper_date

/*
В результате сбоя в базе данных разъехалась 
информация между остатками и операциями по счетам. 
Напишите нормализацию (процедуру выравнивающую данные),
которая найдет 
такие счета и восстановит остатки по счету.
*/
USE BankOperations;

UPDATE accounts a
INNER JOIN (SELECT SUM(IF (dt=1,(-1)*sum,sum))as 'newsum' ,
acc_ref
FROM records
WHERE dt=0 OR dt=1
GROUP BY acc_ref
ORDER BY acc_ref) s ON a.id=s.acc_ref
SET saldo =newsum
WHERE a.saldo<>s.newsum AND a.id<>0

/*
Сформируйте выборку, который содержит информацию о клиентах, 
которые полностью погасили кредит, но при этом не закрыли 
продукт и пользуются им дальше 
(по продукту есть операция новой выдачи кредита).
*/
SELECT clients.*
FROM clients INNER JOIN (accounts 
INNER JOIN ( products INNER JOIN product_type 
ON products.product_type_id=product_type.id)
ON accounts.product_ref=products.id)
ON clients.id=accounts.client_ref
WHERE accounts.saldo=0 AND
accounts.close_date is null
AND product_type.name='КРЕДИТ'

/*
Закройте продукты (установите дату закрытия равную текущей) 
типа КРЕДИТ, у которых произошло полное погашение, 
но при этом не было повторной выдачи.
*/
UPDATE accounts
SET close_date=CURRENT_DATE()
WHERE saldo=0 AND product_ref IN
(SELECT products.id
FROM products INNER JOIN product_type 
ON products.product_type_id=product_type.id
WHERE product_type.name='КРЕДИТ')

/*
Закройте возможность открытия 
(установите дату окончания действия) для типов продуктов, 
по счетам продуктов которых, 
не было движений более одного месяца.
*/
Use BankOperations;
UPDATE product_type
SET end_date=CURRENT_DATE()
WHERE id IN 
(SELECT product_type_id
FROM products INNER JOIN accounts
ON products.id = accounts.product_ref
WHERE accounts.id IN (SELECT acc_ref
FROM records
GROUP BY acc_ref
HAVING MAX(oper_date)<CURRENT_DATE()-INTERVAL 1 MONTH
ORDER BY acc_ref)) AND id<>0

/*
В модель данных добавьте сумму договора по продукту. 
Заполните поле для всех продуктов суммой максимальной 
дебетовой операции по счету для продукта типа КРЕДИТ, 
и суммой максимальной кредитовой операции по счету 
продукта для продукта 
типа ДЕПОЗИТ или КАРТА.
*/
Use BankOperations;

ALTER TABLE  products
ADD sum_contract  FLOAT(10, 2);


UPDATE products INNER JOIN product_type ON 
products.product_type_id=product_type.id

SET sum_contract = CASE 
WHEN
products.product_type_id =
(SELECT id
FROM product_type
WHERE name='КРЕДИТ') 
THEN (SELECT MAX(sum)
FROM records,accounts,product_type
WHERE records.acc_ref=accounts.id
AND products.id=accounts.product_ref
AND product_type.name='КРЕДИТ'
AND records.dt=1
GROUP BY product_type.name)
WHEN products.product_type_id =
(SELECT id
FROM product_type
WHERE name='ДЕПОЗИТ' ) 
THEN (SELECT MAX(sum)
FROM records,accounts,product_type
WHERE records.acc_ref=accounts.id
AND products.id=accounts.product_ref
AND product_type.name='ДЕПОЗИТ'
AND records.dt=0
GROUP BY product_type.name)
WHEN products.product_type_id =
(SELECT id
FROM product_type
WHERE name='КАРТА' )
THEN (SELECT MAX(sum)
FROM records,accounts,product_type
WHERE records.acc_ref=accounts.id
AND products.id=accounts.product_ref
AND product_type.name='КАРТА'
AND records.dt=0
GROUP BY product_type.name)
END;
